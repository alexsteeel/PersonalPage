@page "/posts/add"

@inject PostsService postsService
@inject NavigationManager navigationManager

@attribute [Authorize]

<h3>Add a new Post</h3>

<div class="row">
    <div class="col-6">
        <EditForm Model="model" OnValidSubmit="async () => await postPlanAsync()">
            <RadzenCard>
                <AlertMessage Message="@message" MessageType="@messageType" />
                <DataAnnotationsValidator />
                <ValidationSummary />

                <RadzenTextBox Placeholder="Title" @bind-Value="model.Title" Style="margin:10px;" />

                <div class="row">

                    <div class="col-6">
                        <Radzen.Blazor.RadzenTextArea Placeholder="Content"
                                                      @oninput="@(args => Change(args.Value.ToString()))"
                                                      Style="margin:10px;" />
                    </div>

                    <div class="col-6">
                        @((MarkupString) Preview)
                    </div>
                </div>
                <hr />
                <RadzenButton ButtonType="Radzen.ButtonType.Submit"
                              ButtonStyle="Radzen.ButtonStyle.Success"
                              Disabled="isBusy"
                              Style="margin:5px" class="btn btn-block"
                              Text="Insert" />
            </RadzenCard>
        </EditForm>
    </div>
</div>

@code {

    void Change(string text)
    {
        model.Content = text;
        Preview = Markdown.ToHtml(text);
        StateHasChanged();
    }

    [CascadingParameter]
    private Task<AuthenticationState> authenticationState { get; set; }

    PostRequest model = new PostRequest();

    bool isBusy = false;

    ElementReference inputReference;

    string message = string.Empty;
    Models.AlertMessageType messageType = Models.AlertMessageType.Success;

    public string Preview { get; set; }

    async Task postPlanAsync()
    {
        isBusy = true;

        var userState = authenticationState.Result;
        postsService.AccessToken = userState.User.FindFirst("AccessToken").Value;

        model.AuthorId = userState.User.FindFirst(ClaimTypes.NameIdentifier).Value;

        var result = await postsService.CreatePostAsync(model);

        if (result.IsSuccess)
        {
            navigationManager.NavigateTo("/Posts");
        }
        else
        {
            message = string.IsNullOrWhiteSpace(result.Message) ? "Возникла ошибка при создании нового поста" : result.Message;
            messageType = Models.AlertMessageType.Error;
        }

        isBusy = false;
    }
}