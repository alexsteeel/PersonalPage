@page "/posts"
@page "/posts/{pageNumber:int}"

@inject PostsService postsService
@inject NavigationManager navigationManager
@attribute [Authorize]

@if (string.IsNullOrWhiteSpace(Query))
{
    <h2>My Posts - Page: @PageNumber</h2>
}
else
{
    <h2>My Posts - Results for '@Query' - Page: @PageNumber</h2>
}

@if (isBusy)
{
    <h2>Loading...</h2>
}
else
{
    <div class="row">
        <RadzenTextBox Placeholder="Search Query" @bind-Value="Query" /><RadzenButton Text="Search" Click="async () => await getPostsAsync()" />
    </div>
    <hr />

    <div class="row">

        @foreach (var post in posts)
        {
            <div class="col-4">
                <RadzenCard Style="margin:10px">
                    <a href='/posts/show/@post.Id'>@post.Title</a>
                    <p>@post.Content</p>

                    @if (checkAuthor(post.AuthorId))
                    {
                        <hr />
                        <div class="row">
                            <div class="col-6">
                                <RadzenButton ButtonStyle="Radzen.ButtonStyle.Success" Text="Edit"
                                              Click='() => navigationManager.NavigateTo($"/posts/details/{post.Id}")'
                                              class="btn-block" />
                            </div>
                            <div class="col-6">
                                <RadzenButton ButtonStyle="Radzen.ButtonStyle.Danger" Text="Delete" class="btn-block"
                                              Click="() => selectPost(post.Id.ToString())" />
                            </div>
                        </div>
                        @if (selectedPostId == post.Id.ToString())
                        {
                            <div class="row">
                                <div class="col-12">
                                    <RadzenButton ButtonStyle="Radzen.ButtonStyle.Info" Text="Confirm" class="btn-block"
                                                  Click="async () => await deletePostAsync()" Style="margin:5px;" />
                                </div>
                            </div>
                        }
                    }
                </RadzenCard>
            </div>
        }
    </div>
    <hr />

    <div class="row">
        @for (int i = 1; i <= totalPages; i++)
        {
            int page = i;
            @if (page == PageNumber)
            {
                <RadzenButton ButtonStyle="Radzen.ButtonStyle.Info" Text="@i.ToString()" Click="async () => await moveToPageAsync(page)" Disabled="true" Style="margin:8px;" />
            }
            else
            {
                <RadzenButton ButtonStyle="Radzen.ButtonStyle.Info" Text="@i.ToString()" Click="async () => await moveToPageAsync(page)" Style="margin:8px;" />
            }

        }

    </div>
}

@code {
    [Parameter]
    public int? PageNumber { get; set; }

    [Parameter]
    public string Query { get; set; }

    [CascadingParameter]
    private Task<AuthenticationState> authenticationState { get; set; }

    bool isBusy = false;
    List<Post> posts = new List<Post>();

    int totalPages = 1;

    bool checkAuthor(string id)
    {
        var userState = authenticationState.Result;
        var userId = userState.User.FindFirst(ClaimTypes.NameIdentifier)?.Value;
        return id == userId;
    }

    async Task getPostsAsync()
    {
        isBusy = true;

        var userState = authenticationState.Result;
        postsService.AccessToken = userState.User.FindFirst("AccessToken").Value;

        if (PageNumber == null)
            PageNumber = 1;

        CollectionPagingResponse<Post> result;

        if (string.IsNullOrWhiteSpace(Query))
            result = await postsService.GetAllPostsByPageAsync(PageNumber.Value);
        else
            result = await postsService.SearchPostsByPageAsync(Query, PageNumber.Value);

        if (result.Count % result.PageSize == 0)
            totalPages = result.Count / result.PageSize;
        else
            totalPages = (result.Count / result.PageSize) + 1;

        posts = result.Records.ToList();

        isBusy = false;
    }

    async Task moveToPageAsync(int pageNumber)
    {
        PageNumber = pageNumber;
        await getPostsAsync();
    }

    string selectedPostId = string.Empty;

    void selectPost(string id)
    {
        selectedPostId = id;
    }

    async Task deletePostAsync()
    {
        isBusy = true;

        var result = await postsService.DeletePostAsync(selectedPostId);
        if (result.IsSuccess)
        {
            var deletedPost = posts.SingleOrDefault(p => p.Id.ToString() == selectedPostId);
            posts.Remove(deletedPost);
        }
        else
        {
            await getPostsAsync();
        }

        isBusy = false;
    }

    protected override async Task OnInitializedAsync()
    {
        await getPostsAsync();
    }
}